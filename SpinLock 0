namespace ServerCore
{
  class SpinLock                       //멀티쓰레드(속도) 사용으로 인한 동시성 문제(단점)를 해결(원자적으로)하기위해서 여러 방식을 사용하는데 그 중 하나인 스핀락 : 잠금이 풀릴 때까지 계속 대기하는 방식
    {
        volatile bool _locked = false; //volatile : 컴파일러 최적화 방지

        public void Acquire()          //상태 가져오기
        {
            while (_locked)
            {
                //잠김이 풀릴 때까지 대기
            }

            //잠금 해제
            _locked = true;              //상태 잠금 (다른곳에서 참조해서 값이 변하지 못하게)

        }

        public void Release() //볼일이 끝났으니 상태 해제
        {
            _locked = false; //잠금 해제
        }
    }
    class Program
    {
        static int _num = 0;
        static SpinLock SpinLock = new SpinLock();

        static void Thread_1()
        {
            for(int i=0; i<100000; i++)
            {
                SpinLock.Acquire();                         //Monitor.Enter()와 비슷한 역할
                _num++;
                SpinLock.Release();                         //Monitor.Exit()와 비슷한 역할
            }
        }
        static void Thread_2()
        {
            for (int i = 0; i < 100000; i++)
            {
                SpinLock.Acquire();
                _num--;
                SpinLock.Release();
            }
        }


        static void Main(string[] args)
        {
            Task t1 = new Task(Thread_1);
            Task t2 = new Task(Thread_2);

            //Thread.Sleep(100); //만약 순서를 맞춰주면 결과가 0이 나옴.(정상) 임시방편
            t1.Start();
            t2.Start();

            Task.WaitAll(t1, t2);

            Console.WriteLine(_num); // 0이 아닌 값이 출력됨.

        }
    }
}
